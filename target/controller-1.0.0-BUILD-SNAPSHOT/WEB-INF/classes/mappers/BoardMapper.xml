<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.LolBoard.mappers.Board">
 <!-- id = 메서드 이름, parameterType=입력타입, resultType=리턴타입 -->
 	
 	
 	
 	
 	<!-- 게시물 목록 보기 -->
	<!-- @Select("select seqno, writer, title, to_char(regdate, 'YYYY-MM-DD HH24:MI:SS') as regdate, hitno "
			+ "from tbl_board order by seqno desc")
	public List<BoardVO> list(); -->
	<select id="list" parameterType="HashMap" resultType="com.LolBoard.dto.BoardVO">
		select @seq:=@seq+1 as seq, seqno, writer, title, to_char(regdate, 'YYYY-MM-DD HH24:MI:SS') as regdate, hitno
			from (select @seq:=0) a, tbl_board b
			where writer like concat('%', #{keyword}, '%') or title like concat('%', #{keyword}, '%') or content like concat('%', #{keyword}, '%')
			order by seq desc limit #{startPoint}, #{postNum}
	</select>
	
	<!-- 작성자의 avatar 불러오기 -->
	<select id="getAvatar" parameterType="int" resultType="String">
		select avatar from tbl_user where userid = 
			(select userid from tbl_board where seqno = #{seqno})
	</select> 	
	
	<!-- 게시물 등록하기 -->
	<!-- @Insert("insert into tbl_board (userid, writer, title, content, org_filename, stored_filename, filesize) "
			+ "values('${board.userid}', '${board.writer}', '${board.title}', '${board.content}', '${board.org_filename}', '${board.stored_filename}', '${board.filesize}')")
	public void write(@Param("board") BoardVO board); -->
	<insert id="write" parameterType="com.LolBoard.dto.BoardVO">
		insert into tbl_board (userid, writer, title, content) 
			values(#{userid}, #{writer}, #{title}, #{content})
	</insert>


	<!-- 게시물 상세 보기 -->
	<!-- @Select("select seqno, writer, title, to_char(regdate, 'YYYY-MM-DD HH24:MI:SS') as regdate, content, org_filename, stored_filename, filesize, userid "
			+ "from tbl_board where seqno = '${seqno}'")
	public BoardVO view(@Param("seqno") int seqno); -->
	<select id="view" parameterType="int" resultType="com.LolBoard.dto.BoardVO">
		select seqno, writer, title, to_char(regdate, 'YYYY-MM-DD HH24:MI:SS') as regdate, 
			   content, userid, likecnt, 
			   (select avatar from tbl_user where userid = 
				(select userid from tbl_board where seqno = #{seqno})) as avatar
			from tbl_board where seqno = #{seqno}
	</select>

	
	<!-- 조회수 업데이트 -->
	<!-- @Update("update tbl_board set hitno = (select  hitno from tbl_board where seqno = '${board.seqno}')+1 where seqno = '${board.seqno}'")
	public void hitno(@Param("board") BoardVO board); -->
	<update id="hitno" parameterType="com.LolBoard.dto.BoardVO">
		update tbl_board set hitno = (select hitno from tbl_board where seqno = #{seqno})+1 
			where seqno = #{seqno}
	</update>
	
	
	<!-- 게시물 수정하기 -->
	<!-- @Update("update tbl_board set writer='${board.writer}', title='${board.title}', content='${board.content}', org_filename='${board.org_filename}', stored_filename='${board.stored_filename}', filesize='${board.filesize}' "
			+ "where seqno='${board.seqno}'")
	public void modify(@Param("board") BoardVO board); -->
	<update id="modify" parameterType="com.LolBoard.dto.BoardVO">
		update tbl_board set writer=#{writer},title=#{title},content=#{content} where seqno=#{seqno}
	</update>
	
	
	<!-- 게시물 삭제하기 -->
	<!-- @Delete("delete from tbl_board where seqno='${seqno}'")
	public void delete(@Param("seqno") int seqno); -->
	<delete id="delete" parameterType="int">
	 	delete from tbl_board where seqno=#{seqno}
	</delete>
	
	
	<!-- 게시물 전체 개수 계산 -->
	<select id="getTotalCount" parameterType="String" resultType="int">
		select count(*) from tbl_board
			where writer like concat('%', #{keyword}, '%') or title like concat('%', #{keyword}, '%') or content like concat('%', #{keyword}, '%');
	</select>
	
	
	<!-- 이전 보기 -->
	<select id="pre_seqno" parameterType="HashMap" resultType="int">
		<![CDATA[
		select ifnull(max(seqno), 0) from tbl_board where seqno < #{seqno} and
			(writer like concat('%',#{keyword},'%') 
			or title like concat('%',#{keyword},'%') 
			or content like concat('%',#{keyword},'%'))
		]]>
	</select>
	
	<!-- 다음 보기 -->
	<select id="next_seqno" parameterType="HashMap" resultType="int">
		<![CDATA[
		select ifnull(min(seqno), 0) from tbl_board where seqno > #{seqno} and
			(writer like concat('%',#{keyword},'%') 
			or title like concat('%',#{keyword},'%') 
			or content like concat('%',#{keyword},'%'))
		]]>
	</select>
	
			
		<!-- 파일 업로드 정보 등록 -->
		<insert id="fileInfoRegistry" parameterType="HashMap">
			insert into tbl_file (seqno,userid,org_filename,stored_filename,filesize,checkfile) 
			<choose>
				<when test='kind.equals("I")'>
					values ((select auto_increment from information_schema.tables where table_name = 'tbl_board' 
				   and table_schema = DATABASE()),#{userid},#{org_filename},#{stored_filename},#{filesize},'Y')
				</when>
				<when test='kind.equals("U")'>	
					values (#{seqno},#{userid},#{org_filename},#{stored_filename},#{filesize},'Y')
				</when>   
			</choose>		   
		</insert>
		
		<!-- 다운로드를 위한 파일 정보 가져오기 -->
		<select id="fileInfo" parameterType="int" resultType="com.LolBoard.dto.FileVO">
			select fileseqno, stored_filename, org_filename, filesize from tbl_file where fileseqno = #{fileseqno}
		</select>
		
		<!-- 게시물 내용 보기에서 업로드된 파일 목록 보기 -->
		<select id="fileListView" parameterType="int" resultType="com.LolBoard.dto.FileVO">
			select fileseqno, org_filename, filesize from tbl_file where seqno = #{seqno} and checkfile='Y'
		</select>
		
		<!-- 게시물 수정에서 파일 삭제 -->
		<update id="deleteFileList" parameterType="HashMap">
			update tbl_file set checkfile='N' where 
			<choose>
				<when test='kind.equals("F")'>
					fileseqno = #{fileseqno}
				</when>
				<when test='kind.equals("B")'>
				 seqno = #{seqno}
				</when>
			</choose>

		</update>
		
		
		<!-- 회원 탈퇴 시 회원이 업로드한 파일 정보 가져오기 -->
		<select id="fileInfoByUserid" parameterType="string" resultType="com.LolBoard.dto.FileVO">
			select stored_filename from tbl_file where userid = #{userid}
		</select>
		
		<!-- 게시물 삭제를 위한 파일 목록 가져 오기 -->
		<select id="deleteFileOnBoard" parameterType="int" resultType="com.LolBoard.dto.FileVO">
			select stored_filename from tbl_file where seqno = #{seqno}
		</select>
			
			
			
	
	
	
	<!-- 댓글 보기 -->
	<select id="replyView" parameterType="com.LolBoard.dto.ReplyVO" resultType="com.LolBoard.dto.ReplyVO">
		select replySeqno, replyWriter, replyContent, to_char(replyRegdate,'YYYY-MM-DD HH24:MI:SS')  
			as replyRegdate, userid,avatar
				 from tbl_reply where seqno = #{seqno}    
			order by replySeqno desc
	</select> 
	
	<!-- 댓글 등록 -->
	<insert id="replyRegistry" parameterType="com.LolBoard.dto.ReplyVO">
		insert into tbl_reply (seqno, userid, replyWriter, replyContent, avatar) 
			values (#{seqno},#{userid},#{replyWriter},#{replyContent}, #{avatar})
	</insert>
	
	<!-- 댓글 수정 -->
	<update id="replyUpdate" parameterType="com.LolBoard.dto.ReplyVO">
		update tbl_reply set replyContent = #{replyContent}  
		where replySeqno = #{replySeqno}
	</update>
	
	<!-- 댓글 삭제 -->
	<delete id="replyDelete" parameterType="com.LolBoard.dto.ReplyVO">
		delete from tbl_reply where replySeqno = #{replySeqno}
	</delete>
		
		
		
		
		
		<!-- 좋아요/싫어요 확인 내용 가져 오기-->
		<select id="likeCheckView" parameterType="HashMap" resultType="com.LolBoard.dto.LikeVO">
			select mylikecheck from tbl_like where seqno = #{seqno} and userid = #{userid}
		</select>
		
		<!-- 좋아요/싫어요 갯수 수정하기 -->
		<select id="boardLikeUpdate" parameterType="HashMap">
			update tbl_board set likecnt = #{likecnt} where seqno = #{seqno}
		</select>
		
		<!-- 좋아요/싫어요 확인 등록하기 -->
		<insert id="likeCheckRegistry" parameterType="HashMap">
			insert into tbl_like (seqno,userid,mylikecheck,likedate) 
				values (#{seqno},#{userid},#{mylikecheck},#{likedate})
		</insert>
		
		<!-- 좋아요/싫어요 확인 수정하기 -->
		<update id="likeCheckUpdate" parameterType="HashMap">
			update tbl_like set mylikecheck = #{mylikecheck}, likedate = #{likedate} 
				where seqno = #{seqno} and userid = #{userid}
		</update>

 
 </mapper>